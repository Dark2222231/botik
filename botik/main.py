import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# –¢–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway/Render)
TOKEN = os.getenv("TOKEN")

if not TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TOKEN! –£–∫–∞–∂–∏ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway/Render.")

bot = Bot(TOKEN)
dp = Dispatcher()

# ===== –°—É—Ä–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã =====
questions = [
    "–ß—Ç–æ –≤–∞–∂–Ω–µ–µ: —Å–≤–æ–±–æ–¥–∞ –∏–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å?",
    "–í–µ—Ä–∏—à—å –ª–∏ —Ç—ã, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–≤–æ—é —Å—É–¥—å–±—É?",
    "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ –≤ –∂–∏–∑–Ω–∏: –¥–µ–Ω—å–≥–∏ –∏–ª–∏ —Å–º—ã—Å–ª?",
    "–ù—É–∂–Ω–æ –ª–∏ –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–∞–≤–¥—É, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ —Ä–∞–Ω–∏—Ç?",
    "–°–ø–æ—Å–æ–±–µ–Ω –ª–∏ —Ç—ã –ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –±–ª–∏–∑–∫–æ–≥–æ?",
    "–°–µ–º—å—è –∏–ª–∏ –∫–∞—Ä—å–µ—Ä–∞ ‚Äî —á—Ç–æ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ?",
    "–í–µ—Ä–∏—à—å –ª–∏ —Ç—ã –≤ –ª—é–±–æ–≤—å –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å?",
    "–õ—É—á—à–µ –±—ã—Ç—å –ª–∏–¥–µ—Ä–æ–º –∏–ª–∏ —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã?",
    "–ß—Ç–æ –≤–∞–∂–Ω–µ–µ: —É—Å–ø–µ—Ö –∏–ª–∏ —Å—á–∞—Å—Ç—å–µ?",
    "–°—á–∏—Ç–∞–µ—à—å –ª–∏ —Ç—ã, —á—Ç–æ –ø—Ä–æ—à–ª–æ–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±—É–¥—É—â–µ–µ?",
    "–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º —Ä–∞–¥–∏ –º–µ—á—Ç—ã?",
    "–ù—É–∂–Ω–æ –ª–∏ –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±–ª–∞–≥–æ–¥–∞—Ä—è—Ç?",
    "–õ—É—á—à–µ –ø—Ä–æ–∂–∏—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é, –Ω–æ —è—Ä–∫—É—é –∂–∏–∑–Ω—å –∏–ª–∏ –¥–ª–∏–Ω–Ω—É—é –∏ —Å–ø–æ–∫–æ–π–Ω—É—é?",
    "–°—á–∏—Ç–∞–µ—à—å –ª–∏ —Ç—ã, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ?",
    "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ: —É–≤–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ª—é–±–æ–≤—å?",
    "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –ª–∏ –∏–Ω–æ–≥–¥–∞ –ø–æ—Å—Ç—É–ø–∏—Ç—å –∂–µ—Å—Ç–∫–æ —Ä–∞–¥–∏ –æ–±—â–µ–≥–æ –±–ª–∞–≥–∞?",
    "–î–µ–Ω—å–≥–∏ –¥–µ–ª–∞—é—Ç –ª—é–¥–µ–π —Å—á–∞—Å—Ç–ª–∏–≤—ã–º–∏?",
    "–ù—É–∂–Ω–æ –ª–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–¥—á–∏–Ω—è—Ç—å—Å—è –∑–∞–∫–æ–Ω—É?",
    "–ß—Ç–æ –≤–∞–∂–Ω–µ–µ: —á–µ—Å—Ç—å –∏–ª–∏ —É—Å–ø–µ—Ö?",
    "–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã —Ä–∏—Å–∫–Ω—É—Ç—å –≤—Å–µ–º —Ä–∞–¥–∏ –∏–¥–µ–∏?",
    "–ß—Ç–æ —Å–∏–ª—å–Ω–µ–µ: —Ä–∞–∑—É–º –∏–ª–∏ —ç–º–æ—Ü–∏–∏?",
    "–°—Ç–æ–∏—Ç –ª–∏ –≤—Å–µ–≥–¥–∞ –¥–æ–≤–µ—Ä—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–±–µ?"
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–≤–µ—Ç–æ–≤
user_answers = {}   # {user_id: {"step": int, "answers": []}}
quiz_links = {}     # {friend_id: owner_id}
finished_users = {} # {user_id: answers} ‚Äî –æ—Ç–≤–µ—Ç—ã –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞

# ===== –°—Ç–∞—Ä—Ç =====
@dp.message(Command("start"))
async def start(message: types.Message):
    user_answers[message.from_user.id] = {"step": 0, "answers": []}
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.\n\n–û—Ç–≤–µ—á–∞–π –Ω–∞ 22 –≤–æ–ø—Ä–æ—Å–∞.")
    await message.answer(questions[0])

# ===== –û—Ç–≤–µ—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =====
@dp.message()
async def quiz(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_answers:
        return

    data = user_answers[user_id]
    step = data["step"]

    if step < len(questions):
        data["answers"].append(message.text.strip().lower())
        data["step"] += 1

    if data["step"] < len(questions):
        await message.answer(questions[data["step"]])
    else:
        finished_users[user_id] = data["answers"]
        link = f"/quiz {user_id}"
        await message.answer(
            f"‚úÖ –¢—ã –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç! –¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å –¥—Ä—É–≥—É —ç—Ç—É —Å—Å—ã–ª–∫—É: `{link}`",
            parse_mode="Markdown"
        )
        del user_answers[user_id]

# ===== –î—Ä—É–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç =====
@dp.message(Command("quiz"))
async def start_friend_quiz(message: types.Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /quiz ID")
        return

    owner_id = int(args[1])
    friend_id = message.from_user.id

    if owner_id not in finished_users:
        await message.answer("‚ùå –≠—Ç–æ—Ç —Ç–µ—Å—Ç –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.")
        return

    quiz_links[friend_id] = owner_id
    user_answers[friend_id] = {"step": 0, "answers": []}

    await message.answer("üî• –û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø—Ä–æ—Ö–æ–¥–∏—à—å —Ç–µ—Å—Ç –¥–ª—è –¥—Ä—É–≥–∞. –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ üòâ")
    await message.answer(questions[0])

# ===== –î—Ä—É–≥ –æ—Ç–≤–µ—á–∞–µ—Ç =====
@dp.message()
async def friend_quiz(message: types.Message):
    friend_id = message.from_user.id
    if friend_id not in user_answers:
        return

    data = user_answers[friend_id]
    step = data["step"]

    data["answers"].append(message.text.strip().lower())
    data["step"] += 1

    if data["step"] < len(questions):
        await message.answer(questions[data["step"]])
    else:
        owner_id = quiz_links.get(friend_id)
        if not owner_id:
            return

        owner_answers = finished_users.get(owner_id, [])
        friend_answers = data["answers"]

        matches = sum(1 for a, b in zip(owner_answers, friend_answers) if a == b)
        percent = round(matches / len(questions) * 100)

        await message.answer(f"üéâ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –¥—Ä—É–≥–æ–º: {percent}%")
        await bot.send_message(
            owner_id,
            f"üéâ –¢–≤–æ–π –¥—Ä—É–≥ @{message.from_user.username or message.from_user.first_name} "
            f"–ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç! –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {percent}%"
        )

        # –ß–∏—Å—Ç–∏–º
        del user_answers[friend_id]
        del quiz_links[friend_id]


# ===== –ó–∞–ø—É—Å–∫ =====
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
